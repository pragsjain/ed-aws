{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/socketio.service.ts","./src/environments/environment.ts","./src/main.ts","ws (ignored)"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component } from '@angular/core';\nimport { HttpClient } from '@angular/common/http'\nimport { SocketioService } from './socketio.service';\nimport { environment } from 'src/environments/environment';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  users:any=[]\n  constructor(private http:HttpClient, private socketService:SocketioService){}\n  ngOnInit(){\n    let url=environment.SOCKET_ENDPOINT+'/api/users';\n    this.http.get(url).subscribe((data)=>\n    //this.http.get('http://localhost:3000/api/users').subscribe((data)=>\n    //this.http.get('api/api/users').subscribe((data)=>\n    {this.users=data;\n    })\n\n    //socket\n    this.socketService.setupSocketConnection();\n  }\n    \n    // fetch('http://localhost:3000/api/users')\n    // .then(response => response.text())\n    // .then(data =>{\n    //   eval(`${data}`)\n    //   console.log(data)\n    // })\n    // .catch(error => console.error(error));\n    // }\n}\n","<div style=\"text-align: center\">\n\n  <div *ngFor=\"let user of users\">\n   <h1>{{user.name}} </h1>\n  </div> \n \n\n</div>\n\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http'\n\nimport { AppComponent } from './app.component';\nimport { SocketioService } from './socketio.service';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule\n  ],\n  providers: [SocketioService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\nimport * as io from 'socket.io-client';\nimport { environment } from 'src/environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class SocketioService {\n  socket;\n  constructor() { }\n  \n  setupSocketConnection() {\n    this.socket = io(environment.SOCKET_ENDPOINT);\n    this.socket.emit('my message', 'Hello there from Angular.');\n    console.log('socket started');\n\n    this.socket.emit('connect', {data: 'data'});\n        this.socket.on('news', (data)=>{\n        console.log(data);\n       this.socket.emit('my other event', { my: 'data' });\n    });\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  SOCKET_ENDPOINT: 'http://localhost:3000',\n  aws_server:'http://52.66.252.216:3000'\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","/* (ignored) */"],"sourceRoot":"webpack:///"}